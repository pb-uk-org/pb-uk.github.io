---
layout: page
title: Visualizing sorting algorithms
# templateClass: tmpl-post
# eleventyNavigation:
#   key: About
#   order: 3
tags:
  - pages
  - code
hasVue: true
algorithms:
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
  -
    file: ./_improved-bubble-sort-generator.js
sets:
  - random
  - random
---

<h1>{{ title }}</h1>

<div id="app"></div>

{% raw %}
<script type="text/x-template" id="app-template">
<div>
{{ message }}
<div>
  {{ title }}
  <div v-for="(algorithm, i) in algorithms">
    <div v-for="(set, j) in sets">
      algorithm: {{ i }} set {{ j }}
      <div v-bind:ref="`canvas-${i}-${j}`"></div>
    </div>
  </div>
</div>
</div>
</script>
{% endraw %}

<script>

{% include './_visualization.js' %};

const algorithms = [];
let fn;
{% for algorithm in algorithms %}
  fn = {% include algorithm.file %};
  algorithms.push({
    fn,
  });
{% endfor %}

const sets = []
{% for set in sets %}
  sets.push({
    generator: '{{ set }}',
  });
{% endfor %}

function render({ compare, swap, set, chart }, value, done, repaint) {
  if (repaint) {
    chart.repaint(set);
    return;
  }
  const { last } = compare;
  chart.draw(last[0], set[last[0]], last[1], set[last[1]], last[2]);
}

const visualizations = new Visualizations({ render });
const fps = false;
const max = 100;

function createVisualisations({ targets, algorithms, sets }) {
  sets.forEach((setDef, i) => {
    const set = getSet[setDef.generator]();
    algorithms.forEach((algorithm, j) => {
      visualizations.add({
        generatorFunction: algorithms[j].fn,
        set: set.slice(),
        chart: {
          $el: targets[j][i],
          n: set.length,
          max,
          height: 100,
          width: 200,
        },
      });
    });
  });

  visualizations.renderAll(true);
  iterate();
}

const getSet = {
  random() {
    const set = [];
    for (let i = 1; i <= max; ++i) {
      set.push(i);
    }
    shuffle(set);
    return set;
  }
};

function iterate() {
  if (visualizations.allDone) return;
  visualizations.step();
  if (visualizations.allDone) {
    setTimeout(() => {
      visualizations.renderAll(true);
    }, fps === false ? 0 : 1000 / fps);
  };
  setTimeout(iterate, fps === false ? 0 : 1000 / fps);
}

vueApp = {
  el: '#app',
  template: '#app-template',
  data() {
    return {
      title: 'My title',
      message: 'loaded',
    };
  },
  methods: {
    createTargets() {
      const targets = [];
      for (let i = 0; i < algorithms.length; ++i) {
        targets.push([]);
        for (let j = 0; j < sets.length; ++j) {
          targets[i].push(this.$refs[`canvas-${i}-${j}`][0]);
        }
      }
      return targets;
    },
  },
  mounted() {
    const targets = this.createTargets();
    createVisualisations({ targets, algorithms, sets });
  }, // mounted()
}
</script>
