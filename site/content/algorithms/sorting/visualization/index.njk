---
layout: page
title: Visualizing sorting algorithms
# templateClass: tmpl-post
# eleventyNavigation:
#   key: About
#   order: 3
tags:
  - pages
  - code
hasVue: true
algorithms:
  -
    file: ./_improved-bubble-sort-generator.js
---

<h1>{{ title }}</h1>

<div id="app"></div>

{% raw %}
<script type="text/x-template" id="app-template">
<div>
{{ message }}
<div>
  {{ title }}
  <div ref="canvas-target"></div>
</div>
</div>
</script>

<script type="text/x-template" id="vis-template">
</script>
{% endraw %}

<script>

function render({ compare, swap, set, chart }, value, done, repaint) {
  if (repaint) {
    chart.repaint(set);
    return;
  }
  const { last } = compare;
  chart.draw(last[0], set[last[0]], last[1], set[last[1]], last[2]);
}

{% include './_visualization.js' %};

const algorithms = [];
{% for algorithm in algorithms %}
  const fn = {% include algorithm.file %};
  algorithms.push({
    fn,
  });
{% endfor %}

const visualizations = new Visualizations({ render });
const fps = false;
const max = 100;

function getSet() {
  const set = [];
  for (let i = 1; i <= max; ++i) {
    set.push(i);
  }
  shuffle(set);
  return set;
}

function iterate() {
  if (visualizations.allDone) return;
  visualizations.step();
  if (visualizations.allDone) {
    setTimeout(() => {
      visualizations.renderAll(true);
    }, fps === false ? 0 : 1000 / fps);
  };
  setTimeout(iterate, fps === false ? 0 : 1000 / fps);
}

vueApp = {
  el: '#app',
  template: '#app-template',
  data() {
    return {
      title: 'My title',
      message: 'loaded',
    };
  },
  mounted() {
    console.log(algorithms);
    for (let i = 0; i < 1; i++) {
      const set = getSet();
      visualizations.add({
        generatorFunction: algorithms[0].fn,
        set,
        chart: {
          $el: this.$refs['canvas-target'],
          n: set.length,
          max,
          height: 100,
          width: 200,
        },
      });
    }
    visualizations.renderAll(true);
    iterate();
  }, // mounted()
}
</script>
